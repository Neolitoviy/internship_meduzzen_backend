name: CI/CD Pipeline

on:
  push:
    branches:
      - be_20_add_github_actions

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS region
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}  # Amazon ECR repository URI
  IMAGE_TAG: latest  # Docker image tag

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Rename .env.sample to .env
        run: mv .env.sample .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_USER: ec2-user
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}
          IMAGE_TAG: latest
        run: |
          echo "$EC2_SSH_KEY" > /tmp/ec2-key.pem
          chmod 600 /tmp/ec2-key.pem

          ssh -o StrictHostKeyChecking=no -i /tmp/ec2-key.pem $EC2_USER@$EC2_HOST <<EOF
            echo "AWS CLI version: \$(aws --version)"
            echo "Docker version: \$(docker --version)"
            
            echo "Stop the current running container if exist..."
            if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^myappcontainer\$"; then
              sudo docker stop myappcontainer
              sudo docker rm myappcontainer
            else
              echo "Container myappcontainer does not exist."
            fi

            echo "List Docker containers after removal..."
            sudo docker ps -a

            echo "Logging in to ECR...."
            sudo aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REPOSITORY
            if [ $? -eq 0 ]; then
              echo "Logged in successfully to ECR."
            else
              echo "Failed to log in to ECR."
              exit 1
            fi

            echo "Pulling image from ECR..."
            sudo docker pull "$ECR_REPOSITORY:$IMAGE_TAG"
            if [ $? -eq 0 ]; then
              echo "Docker pull completed successfully."
            else
              echo "Failed to pull Docker image."
              exit 1
            fi

            echo "Running the container..."
            sudo docker run -d \
              --name myappcontainer \
              -p 80:8000 "$ECR_REPOSITORY:$IMAGE_TAG"
            if [ $? -eq 0 ]; then
              echo "Docker container started successfully."
            else
              echo "Failed to start Docker container."
              exit 1
            fi

            echo "List running Docker containers after deployment..."
            sudo docker ps -a
