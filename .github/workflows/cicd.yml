name: CI/CD Pipeline

on:
  push:
    branches:
      - be_20_add_github_actions

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                 # AWS region
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }}     # Amazon ECR repository URI
  IMAGE_TAG: latest                                     # Docker image tag

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Rename .env.sample to .env
        run: mv .env.sample .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
        shell: bash

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo yum update -y
            sudo yum install docker -y
            sudo systemctl start docker
            sudo yum install aws-cli -y
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ secrets.AWS_REGION }}
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.ECR_REPOSITORY_URI }}
            sudo docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker run -d --name myappcontainer -p 80:8000 ${{ secrets.ECR_REPOSITORY_URI }}:latest
