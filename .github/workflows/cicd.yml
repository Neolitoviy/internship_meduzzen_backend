name: CI/CD Pipeline

on:
  push:
    branches:
      - be_20_add_github_actions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Rename .env.sample to .env
        run: mv .env.sample .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

      - name: Get commit hash
        id: get-commit-hash
        run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_PUBLIC_IP }}
          EC2_USER: ec2-user
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ secrets.ECR_REPOSITORY_URI }}
          ECR_REPOSITORY: myapprepository
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          echo "$EC2_SSH_KEY" > /tmp/ec2-key.pem
          chmod 600 /tmp/ec2-key.pem

          ssh -o StrictHostKeyChecking=no -i /tmp/ec2-key.pem $EC2_USER@$EC2_HOST <<EOF
            sudo yum update -y
            sudo yum install docker -y
            sudo systemctl start docker
            sudo yum install aws-cli -y
            docker login -u AWS -p $(aws ecr get-login-password --region ${AWS_DEFAULT_REGION}) ${ECR_REGISTRY}
            docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            docker stop app celery_worker celery_beat flower || true
            docker rm app celery_worker celery_beat flower || true
            docker run -d --name app -p 8010:8000 ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            docker run -d --name celery_worker ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} celery -A app.celery:celery worker --loglevel=info
            docker run -d --name celery_beat ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} celery -A app.celery:celery beat --loglevel=info
            docker run -d --name flower -p 5555:5555 ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} celery -A app.celery:celery flower --port=5555
          EOF
